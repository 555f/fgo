// Code generated by go-bindata.
// sources:
// assets/Makefile
// assets/formula.rb
// DO NOT EDIT!

package command

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsMakefile = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4c\x8e\x31\x4f\xc3\x30\x10\x85\x67\xfc\x2b\x4e\x2a\x43\x3b\xc4\x01\x06\x86\x48\x99\x00\x89\x02\x4d\x11\x14\x24\x46\x13\x5f\x62\x8b\x24\xb6\xec\x73\x0b\xb2\xfa\xdf\x49\x42\x68\xbb\xf8\xfc\x9e\xee\x7b\xef\x66\x6c\x06\x2b\xf1\x85\x95\x6e\x90\x0d\xe2\xc6\xd8\x1f\xa7\x6b\x45\x30\x2f\x17\x70\x75\x71\x79\x0d\x0f\xa1\xb3\xa8\xe1\x51\xec\x44\x6b\xc8\x8c\x6b\x1b\xa5\x3d\x78\x53\xd1\x4e\x38\x84\xfe\xef\xb0\x41\xe1\x51\x42\xe8\x24\x3a\x20\x85\xb0\x5a\x6e\xe0\x49\x97\xd8\x79\xe4\x23\xa4\x88\x6c\x96\xa6\xc6\xf6\x96\x09\xae\x44\x6e\x5c\x9d\x36\x7f\x2b\x3e\x6d\x35\x25\x93\xe0\x56\xd9\x1e\x79\xbf\x7b\x79\x5d\xae\x0b\xc8\xc1\x77\xc2\x7a\x65\x88\x31\x89\x95\x08\x0d\x65\xf0\x19\x74\x23\x19\xe3\xcf\xf7\xeb\xe2\xe3\x5f\x8e\x6f\xc6\xce\x6a\xf3\x5d\x42\x22\xf3\x18\xf9\x2d\x7a\xda\xef\x21\xb1\xdb\xfc\x7c\x3e\x25\x2e\x8e\xdc\x74\x38\x9b\xe6\xc0\x2a\x07\x31\xea\x0a\xf8\x9b\x47\x57\x88\x16\x07\x3c\xf4\xde\xa9\x11\x23\x76\xb2\x9f\xdb\x63\x28\x1c\xda\xd2\x93\xa6\xdf\x00\x00\x00\xff\xff\xc3\xc8\x51\x50\x63\x01\x00\x00")

func assetsMakefileBytes() ([]byte, error) {
	return bindataRead(
		_assetsMakefile,
		"assets/Makefile",
	)
}

func assetsMakefile() (*asset, error) {
	bytes, err := assetsMakefileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/Makefile", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsFormulaRb = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x51\xcd\x8a\xdb\x30\x10\xbe\xfb\x29\x06\xe7\xd2\x1e\x2a\xb5\x69\x6a\x4a\x28\xf4\x10\x08\xe9\x2f\x39\x24\xbd\x06\xc5\x1a\x5b\xa2\xb2\x64\x34\x72\x42\x70\xfd\xee\x95\x62\x2f\x9b\x65\xd9\x85\xbd\x2c\x18\xa3\x99\xef\xd7\xd6\x2c\x9b\x81\x20\xc2\x40\xbc\x72\xbe\xe9\x8c\x60\xb5\xcb\xd2\x76\xe5\xda\x8b\xd7\xb5\x0a\xf0\xa6\x7c\x0b\xf3\xf7\x1f\x0a\xf8\xde\xd9\x16\x35\xfc\x10\x67\xd1\xb8\x30\xd2\x76\x4a\x13\x90\xab\xc2\x59\x78\x84\x78\xf6\x68\x50\x10\x4a\xe8\xac\x44\x0f\x41\x21\xfc\xfa\xb6\x83\x9f\xba\x44\x4b\xc8\xae\x22\x15\x42\xbb\xe4\xdc\xb5\x71\xe5\x3a\x5f\x22\x73\xbe\xe6\x66\xa4\x10\x6f\x74\x78\x37\x0d\xac\x55\x6d\x94\x94\x26\x96\x84\xbe\x67\x5b\x51\xfe\x15\x35\xc2\x3f\xd8\xe9\x60\x70\x18\xe0\x0b\xac\xc7\xe2\x19\x80\x44\x2a\x21\xcf\xe3\x49\xb9\x06\xdb\x44\xcc\x53\x16\xc5\xb0\x5a\x07\xd5\x1d\x59\xe9\x1a\x1e\x7d\xf6\x84\xfe\xb7\x68\xa2\x01\xbf\x77\x1d\x86\x24\x3d\xa1\x27\xed\x2c\xe4\x7d\x1f\x1f\xf6\x67\x1c\x23\x96\xe0\x88\xeb\x0a\x36\xc2\xcb\xf4\xbd\xcb\xe5\x6a\xbb\x67\x9a\x0e\xc5\xe2\x70\xd4\xe1\x6b\x44\x01\x3a\x6f\x5e\x98\xca\xa7\x7f\x46\x5c\xba\xb3\x35\x4e\x48\x7e\x7a\x1c\xce\xc7\xd5\x5a\x1b\x4c\x1e\xc5\x62\xaa\x94\x32\x49\x89\xf9\xa7\xe2\xae\xf2\x46\x90\xba\x81\xd1\x10\xbe\x66\xb3\x8f\x9f\x8b\x67\xab\xdd\xe2\x68\x65\x76\xbd\xb8\x0a\xb4\xa5\x20\x8c\xb9\x8a\x8e\xda\xb2\x69\x4e\xca\x87\x17\x34\x69\x02\x52\x00\xe9\xc6\x90\x0b\x05\x6c\x9e\xa0\xa6\xd7\xff\x00\x00\x00\xff\xff\x2b\x18\xea\xaa\xe8\x02\x00\x00")

func assetsFormulaRbBytes() ([]byte, error) {
	return bindataRead(
		_assetsFormulaRb,
		"assets/formula.rb",
	)
}

func assetsFormulaRb() (*asset, error) {
	bytes, err := assetsFormulaRbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/formula.rb", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/Makefile": assetsMakefile,
	"assets/formula.rb": assetsFormulaRb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"Makefile": &bintree{assetsMakefile, map[string]*bintree{}},
		"formula.rb": &bintree{assetsFormulaRb, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

