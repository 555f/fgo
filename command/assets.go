// Code generated by go-bindata.
// sources:
// assets/Makefile
// assets/formula.rb
// DO NOT EDIT!

package command

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsMakefile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8e\xc1\x6a\x83\x40\x10\x86\xcf\x9d\xa7\x18\xd0\x83\x1e\xb4\x77\x61\x0f\x85\xb6\x5a\x68\xb5\x28\x2d\xe4\xb8\xc9\x8e\x51\xb2\x51\x71\x55\x02\xc3\xbe\x7b\x30\x68\xf4\x32\xc3\x0c\x7c\xff\xf7\x3b\xe0\xe0\x8f\xbc\x50\x59\x6b\x02\x07\xfe\x3f\xf2\xe2\x2b\x4b\x51\xa0\x69\x64\x67\xaa\x76\x80\x38\xc9\x3f\xbf\xdf\xe2\x02\x05\x80\xa2\x52\x8e\x7a\x88\xf0\x38\xd6\x5a\x01\x84\xbf\x49\x96\x1e\xd6\xf3\x31\x23\x78\x39\xb7\xb7\x13\x06\x4a\x30\x87\xef\x64\x06\x6b\x31\xe8\x26\xe1\x7a\x4b\xb8\xbf\x71\x3d\x69\x92\x86\x60\xd9\x33\x5b\xf5\xc8\x5c\x97\x18\xfe\x19\xea\x53\x79\xa5\x19\x1f\x91\x79\xff\x60\xa6\x46\x59\x8b\xae\xb7\xb6\xf3\x71\xda\x04\xf8\x34\xbf\xee\xac\xf7\x00\x00\x00\xff\xff\x06\x0c\xa5\x85\xeb\x00\x00\x00")

func assetsMakefileBytes() ([]byte, error) {
	return bindataRead(
		_assetsMakefile,
		"assets/Makefile",
	)
}

func assetsMakefile() (*asset, error) {
	bytes, err := assetsMakefileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/Makefile", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsFormulaRb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x91\x41\x4b\x03\x31\x10\x85\xef\xfb\x2b\x86\xfc\x80\x04\xb4\x2e\xb2\x08\x1e\x84\xd2\x93\xf4\x60\xbd\x96\xd9\xcd\xb4\x1b\xcc\x26\x25\x93\x6d\x91\x98\xff\x2e\xe9\xae\x58\x11\x05\x2f\x5e\x02\x93\x37\x6f\xde\x07\xaf\xb3\xc8\x0c\x29\xc9\x35\x76\x2f\xb8\x27\x78\x83\x27\x13\x2d\xe5\x0c\x77\xb0\xf4\x61\x18\x2d\x56\x00\x9a\xb8\x03\x21\x2a\x80\xde\x0f\x74\x28\x8b\xa2\x8f\xf1\xc0\x8d\x52\x7b\x13\xfb\xb1\x95\x9d\x1f\x54\x4a\x72\xc3\x14\x1e\x71\xa0\x9c\xd5\xe7\xd5\x9c\x8b\xf5\x48\x81\x8d\x77\x20\x52\x12\x29\xc9\xe7\x69\xcc\x59\x14\xb9\x02\x30\x3b\x58\x61\xd0\x27\x0c\xd4\x34\x0f\xeb\x8d\x34\xbc\xad\x17\xdb\xd6\xc4\xfb\x0a\x00\x60\x0c\xf6\x8f\xa9\x2a\x90\x25\x64\x62\xa5\xfd\xc9\x59\x8f\x5a\x1d\xbf\x87\xab\xe9\x6b\x69\x2c\x95\x1b\xf5\x62\x46\x2a\x99\xdc\xe3\xd5\x4d\xfd\x81\xbc\x42\xee\x2f\x64\xb2\x4c\xff\x49\x76\x7d\x5b\xff\x8a\x76\xa9\x93\xd3\xd5\xb9\xb8\x1d\x18\xc7\x11\xad\x3d\x9b\x5a\xe3\xe4\x3c\x17\xe7\xd7\x82\x66\x4f\x24\x8e\xa0\xfd\x14\xf2\xca\x91\x86\x1f\x56\xcb\xf3\x1e\x00\x00\xff\xff\x31\xbb\x4a\x74\x41\x02\x00\x00")

func assetsFormulaRbBytes() ([]byte, error) {
	return bindataRead(
		_assetsFormulaRb,
		"assets/formula.rb",
	)
}

func assetsFormulaRb() (*asset, error) {
	bytes, err := assetsFormulaRbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/formula.rb", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/Makefile": assetsMakefile,
	"assets/formula.rb": assetsFormulaRb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"Makefile": &bintree{assetsMakefile, map[string]*bintree{}},
		"formula.rb": &bintree{assetsFormulaRb, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

