// Code generated by go-bindata.
// sources:
// assets/Makefile
// assets/formula.rb
// DO NOT EDIT!

package command

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsMakefile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8e\xc1\x6a\x83\x40\x10\x86\xcf\x9d\xa7\x18\xd0\x83\x1e\xb4\x77\x61\x0f\x85\xb6\x5a\x68\xb5\x28\x2d\xe4\xb8\xc9\x8e\x51\xb2\x51\x71\x55\x02\xc3\xbe\x7b\x30\x68\xf4\x32\xc3\x0c\x7c\xff\xf7\x3b\xe0\xe0\x8f\xbc\x50\x59\x6b\x02\x07\xfe\x3f\xf2\xe2\x2b\x4b\x51\xa0\x69\x64\x67\xaa\x76\x80\x38\xc9\x3f\xbf\xdf\xe2\x02\x05\x80\xa2\x52\x8e\x7a\x88\xf0\x38\xd6\x5a\x01\x84\xbf\x49\x96\x1e\xd6\xf3\x31\x23\x78\x39\xb7\xb7\x13\x06\x4a\x30\x87\xef\x64\x06\x6b\x31\xe8\x26\xe1\x7a\x4b\xb8\xbf\x71\x3d\x69\x92\x86\x60\xd9\x33\x5b\xf5\xc8\x5c\x97\x18\xfe\x19\xea\x53\x79\xa5\x19\x1f\x91\x79\xff\x60\xa6\x46\x59\x8b\xae\xb7\xb6\xf3\x71\xda\x04\xf8\x34\xbf\xee\xac\xf7\x00\x00\x00\xff\xff\x06\x0c\xa5\x85\xeb\x00\x00\x00")

func assetsMakefileBytes() ([]byte, error) {
	return bindataRead(
		_assetsMakefile,
		"assets/Makefile",
	)
}

func assetsMakefile() (*asset, error) {
	bytes, err := assetsMakefileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/Makefile", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsFormulaRb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x94\xdf\x6b\xd4\x40\x10\xc7\xdf\xf3\x57\x0c\x79\xb9\xb7\x2c\x68\x3d\x24\x08\x3e\x1c\x9c\x15\xb4\x16\xb1\xbe\x88\x1c\x9b\xdd\xb9\xcb\xd0\xfd\x51\x77\x36\xdd\x1e\x49\xfe\x77\xd9\xa4\xd7\x9e\xa8\x70\x82\x88\xd0\x3c\x24\xd9\x99\xcf\x4c\xbe\xbb\xf9\x32\x01\xbf\x75\x14\x10\x16\xa1\x51\xde\x6d\x69\xb7\x28\x94\x91\xcc\xd0\xf7\xd5\xa5\x54\xd7\x72\x87\x30\xc0\x27\x8a\x06\xc7\x11\x5e\xc1\xda\x07\xdb\x19\x59\x00\x68\x64\x05\x65\x59\x00\xb4\xde\xe2\x4d\x06\xcb\x36\xc6\x1b\xae\x85\xd8\x51\x6c\xbb\xa6\x52\xde\x8a\xbe\xaf\xae\x18\xc3\x85\xb4\x38\x8e\xe2\xb1\xeb\x38\xe6\xd2\x5b\x0c\x4c\xde\x41\xd9\xf7\x65\xdf\x57\x9f\xe7\xe5\x38\x96\x39\x5d\x00\xd0\x16\xce\x65\xd0\x49\x06\xac\xeb\xd5\xe5\x55\x45\xbc\x59\x9e\x6d\x1a\x8a\xaf\x0b\x00\x00\x25\x19\xe1\x63\xb3\x9a\xa4\xd7\xf5\xea\xc3\xc5\xfa\xed\x9b\x2f\x8b\xd6\x73\xdc\x78\x5e\x7c\x9d\xa0\xd4\xa2\x03\x61\x39\x91\x1b\x2c\xef\x79\xb0\xe4\x76\x69\x50\xfb\x5d\x8e\x34\x4a\xe5\x47\x22\xa7\x70\x40\xab\xc4\x54\x03\x50\x27\x72\xda\x27\x3e\x6a\xa1\x65\x98\x7a\x48\x05\x9e\x0f\x5c\x17\xcc\x1f\x6e\x5c\x04\x34\x28\x19\x59\x68\x9f\x9c\xf1\x52\x8b\xdb\x9f\xf7\x2f\xe6\xd0\x7b\xa9\x96\x67\xd5\x9a\x0c\xce\x9d\xca\xf9\xe0\xf2\xc5\xad\x7c\xf6\x62\x79\x38\xbb\x19\x3c\x97\xdc\x1e\x41\xb3\x6e\x43\xae\xbb\xfb\x47\x7a\xdf\xe5\x6f\x9d\xa6\xf8\x80\xfe\x52\x33\x7b\x23\x03\xf1\xd0\xb0\x7e\xf8\x23\x9d\xa3\xbb\xe9\x1d\x0d\xe3\x63\xf0\xda\xf9\xe4\xe6\xb8\xd3\xc5\x51\xf6\x49\xb8\xe3\xf9\xcb\xe5\x89\xf6\xc8\xe4\xff\xe1\x8f\x13\x35\x3f\xb0\x7f\xdd\x21\x4e\x17\xd3\x08\xdb\x02\x39\x8e\xd2\x98\x29\xd9\x90\xab\xee\xd7\x59\xc2\x8f\xa3\xea\xbe\x26\x22\x47\xd0\x7e\xe2\x79\xcf\x11\xed\x6f\xd0\x7c\xfb\x1e\x00\x00\xff\xff\xa9\x65\xe9\x8e\x5e\x05\x00\x00")

func assetsFormulaRbBytes() ([]byte, error) {
	return bindataRead(
		_assetsFormulaRb,
		"assets/formula.rb",
	)
}

func assetsFormulaRb() (*asset, error) {
	bytes, err := assetsFormulaRbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/formula.rb", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/Makefile": assetsMakefile,
	"assets/formula.rb": assetsFormulaRb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"Makefile": &bintree{assetsMakefile, map[string]*bintree{}},
		"formula.rb": &bintree{assetsFormulaRb, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

