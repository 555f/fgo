// Code generated by go-bindata.
// sources:
// assets/Makefile
// assets/formula.rb
// DO NOT EDIT!

package fgo

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsMakefile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8e\x41\x6b\x83\x40\x10\x46\xcf\x9d\x5f\x31\xa0\x07\x3d\x68\xef\xc2\x1e\x0a\x6d\xb5\xd0\x68\x50\x12\xc8\x71\x93\x1d\xa3\x64\xa3\xe2\xaa\x04\x86\xfd\xef\xc1\x60\x12\x4f\x03\x1f\x8f\xf7\xc6\x01\x07\x37\xf2\x42\x65\xad\x09\x1c\xd8\xff\xe4\xc5\x5f\x96\xa2\x40\xd3\xc8\xce\x54\xed\x00\x71\x92\xff\xfe\x7f\xc5\x05\x0a\x08\xb7\x49\x96\x1e\x22\x3c\x8e\xb5\x56\xd8\x93\x26\x69\x08\x40\x51\x29\x47\x3d\x2c\x3b\xc0\xe3\x44\xf0\x71\x6e\x6f\x27\x0c\x94\x60\x0e\xbf\xc9\x0c\xd6\x62\xd0\x4d\xc2\xf5\x96\x88\x0f\xb0\x28\x66\xb6\xea\x91\xb9\x2e\x31\xdc\x19\xea\x53\x79\xa5\x19\x1f\x91\x79\x3d\x30\x53\xa3\xac\x45\xd7\x7b\x7e\xe5\xe3\xf4\x16\xe2\xab\xf4\xb9\xaa\xdc\x03\x00\x00\xff\xff\x26\x65\x9e\xe3\xe3\x00\x00\x00")

func assetsMakefileBytes() ([]byte, error) {
	return bindataRead(
		_assetsMakefile,
		"assets/Makefile",
	)
}

func assetsMakefile() (*asset, error) {
	bytes, err := assetsMakefileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/Makefile", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsFormulaRb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x94\x51\x8b\xd4\x30\x10\xc7\xdf\xfb\x29\x86\xbe\xec\x5b\x03\x7a\x2e\x52\x04\x1f\x56\xd6\x13\xf4\x3c\xc4\xf3\x45\x64\x49\x93\xd9\x76\xb8\x34\x59\x33\xe9\xf5\x96\xb6\xdf\x5d\x92\xde\xde\xae\xa8\xb0\x82\x88\x60\x1f\xda\x66\xe6\x37\x93\xff\x24\xc3\x78\xfc\xda\x91\x47\x58\xf8\x4a\x39\xbb\xa5\x7a\x91\x29\x23\x99\x61\x18\x8a\x6b\xa9\x6e\x65\x8d\x30\xc2\x47\x0a\x06\xa7\x09\x5e\xc0\xda\xf9\xb6\x33\x32\x03\xd0\xc8\x0a\xf2\x61\x28\x5e\x21\x2b\x4f\xbb\x40\xce\x4e\x53\x9e\x01\x34\xae\xc5\x5d\x0c\xcc\x9b\x10\x76\x5c\x0a\x51\x53\x68\xba\xaa\x50\xae\x15\xc3\x50\xdc\x30\xfa\x2b\xd9\xe2\x34\x89\xe3\x2e\x73\xe8\x1d\x7a\x26\x67\x63\xde\x98\xfa\xd3\xbc\x9c\xa6\x3c\xba\x33\x00\xda\xc2\xa5\xf4\xba\x97\x1e\xcb\x72\x75\x7d\x53\x10\x6f\x96\x17\x9b\x8a\xc2\xcb\x0c\x00\x40\x49\x46\xf8\x50\xad\x52\x29\x65\xb9\x7a\x7f\xb5\x7e\xf3\xfa\xf3\xa2\x71\x1c\x36\x8e\x17\x5f\x12\xd4\x37\x68\x41\xb4\xdc\x93\x1d\x5b\xde\xf3\xd8\x92\xad\xfb\x51\xed\xeb\x68\xa9\x94\x8a\x9f\x9e\xac\xc2\x11\x5b\x25\x52\x0c\x40\xd9\x93\xd5\xae\xe7\x93\x14\x5a\xfa\x94\x43\x2a\x70\x7c\xe0\x3a\x6f\x7e\xb3\x70\xe1\xd1\xa0\x64\x64\xa1\x5d\x6f\x8d\x93\x5a\xdc\xfd\x58\xbf\x98\x4d\xef\xa4\x5a\x5e\x14\x6b\x32\x38\x67\xca\xe7\x83\x8b\x0f\x37\xf2\xc9\xb3\xe5\xe1\xec\x66\xf0\x52\x72\x73\x02\xcd\xba\x0d\xd9\xee\xfe\x2f\xe9\x7d\x1b\xf7\x3a\x4f\xf1\x01\xfd\xa9\x66\x76\x46\x7a\xe2\xb1\x62\xfd\x78\x23\x9d\xa5\xfb\xf4\x8f\x86\xf1\x68\xbc\xb5\xae\xb7\xb3\xdd\xea\xec\xc4\xfb\x5f\x74\xc7\xd3\xe7\xcb\x33\xdb\x23\x92\xff\x46\x7f\x9c\xa9\xf9\x91\xfd\xe3\x1d\x62\x75\x96\x46\xda\x16\xc8\x72\x90\xc6\x24\x67\x45\xb6\x78\x58\xa7\x49\xf7\xdd\xa8\x7a\x88\x09\xc8\x01\xb4\x4b\x3c\xef\x39\x60\xfb\x0b\x34\xbe\xbe\x05\x00\x00\xff\xff\x8e\xa6\xec\x2c\x6e\x05\x00\x00")

func assetsFormulaRbBytes() ([]byte, error) {
	return bindataRead(
		_assetsFormulaRb,
		"assets/formula.rb",
	)
}

func assetsFormulaRb() (*asset, error) {
	bytes, err := assetsFormulaRbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/formula.rb", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/Makefile": assetsMakefile,
	"assets/formula.rb": assetsFormulaRb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"Makefile": &bintree{assetsMakefile, map[string]*bintree{}},
		"formula.rb": &bintree{assetsFormulaRb, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

